#!/bin/bash

MAIN_JSON=.purplesec
CROWDSEC_ACQUIS_FILE=docker/purpleids/crowdsec/acquis.yaml


function setup_helper {
# link project files to 9xeb.push-compose ansible role
echo "[*] Linking your ./docker to ansible roles that require it"
unlink ansible/roles/9xeb.push-compose/files;
ln -s ../../../docker ansible/roles/9xeb.push-compose/files
unlink ansible/roles/9xeb.push-compose/templates;
ln -s ../../../docker ansible/roles/9xeb.push-compose/templates

unlink ansible/roles/9xeb.push-volumes/files;
ln -s ../../../docker ansible/roles/9xeb.push-volumes/files
#echo "[*] Done"

#!/bin/bash
if ! file -E ${MAIN_JSON} > /dev/null; then echo "[!] "${MAIN_JSON}" does not exist." && exit 1; fi
interface=$(cat ${MAIN_JSON} | jq '.nsm_interface' | cut -d'"' -f 2)
echo "[*] NSM interface is "${interface}
#read -p "Enter network interface of your NSM > " interface
#sed -i 's/INTERFACE=.*/INTERFACE='${interface}'/g' docker/nsm/.env
sed -i 's/ZEEK_INTERFACE=.*/ZEEK_INTERFACE='${interface}'/g' docker/nsm/.env
sed -i 's/SURICATA_INTERFACE=.*/SURICATA_INTERFACE='${interface}'/g' docker/nsm/.env

file -E docker/purpleids/.env > /dev/null || \
(cat << EOF
DB_USER=$(cat /proc/sys/kernel/random/uuid)
DB_PASSWORD=$(cat /proc/sys/kernel/random/uuid)
EOF
 ) > docker/purpleids/.env
}

function logs_helper {
if ! file -E ${MAIN_JSON} > /dev/null; then touch ${MAIN_JSON}; fi && \
case $1 in
  ls)
    cat ${MAIN_JSON} | jq -c '.logs[]'
    ;;
  edit)
    nano ${MAIN_JSON}
    ;;
  explore)
    #cat ${MAIN_JSON} | jq '.volumes[]' | cut -d'"' -f2 | grep ^${2}$ && \
    #sudo docker run --rm -it -v ${2}:/${2} debian bash || \
    #echo "[*] Volume not found";
    ;;
  *)
    echo "[*] Unknown argument "${1}
    exit 1
    ;;
esac
}


function volumes_helper {
if ! file -E ${MAIN_JSON} > /dev/null; then touch ${MAIN_JSON}; fi && \
case $1 in
  ls)
    cat ${MAIN_JSON} | jq -c '.volumes[]'
    ;;
  #add)
    #if ! grep ${2} .volumes > /dev/null; then echo ${2} >> .volumes; fi && echo "[*] Added volume "${volume}
    #;;
  #rm)
    #sed -i 's/'${2}'//g' .volumes && echo "[*] Removed volume "${volume}
    #;;
  edit)
    nano ${MAIN_JSON}
    ;;
  *)
    echo "[*] Unknown argument "${1}
    exit 1
    ;;
esac
}

# Update resources regarding volumes, making sure docker and ansible agree:
#  - volumes definitions in a docker compose file
#  - ansible variables referring to volumes for NFS servers
function refresh_volumes {
#   mv docker/docker-compose-ansible.yml docker/docker-compose-ansible.yml.old && \
#   cat >> docker/docker-compose-ansible.yml << EOF
# version: '2.2'
# # Volumes only
# volumes:
# EOF
  cp templates/vars.yml.template ansible/vars/main.yml && \
  echo "docker_volumes:" >> ansible/vars/main.yml
  #crowdsec_mountlist=""
#  for volume in $(cat ${MAIN_JSON} | jq '.volumes[]' | cut -d'"' -f 2); do
#    cat >> docker/docker-compose-ansible.yml<< EOF
#  ${volume}:
#    driver: local
#    driver_opts:
#      type: nfs4
#      o: addr=127.0.0.1,proto=tcp,port=12345,nosuid,noexec,nodev,rw
#      device: ":/srv/swarm/docker/volumes/${volume}"
#EOF
#    cat >> ansible/vars/main.yml<< EOF
#  - ${volume}
#EOF
#  done
  all_volumes=""
  PATH=$PATH:$GOPATH:~/go/bin
  for stack in $(yq '.'${STACK_NAME}'[].name' templates/vars.yml.template);
  do
    rm docker/docker-compose.volumes.${stack}.yml && touch docker/docker-compose.volumes.${stack}.yml
    cat >> docker/docker-compose.volumes.${stack}.yml << EOF
version: '${COMPOSE_VERSION}'
# Volumes only
volumes:
EOF
    for conf in $(yq '.'${STACK_NAME}'[] | select(.name=="'${stack}'") | .conf[]' templates/vars.yml.template);
    do
      echo "[conf] "${conf}
      for volume in $(yq '.volumes | keys' docker/${conf} 2>/dev/null | cut -d'-' -f2- | xargs);
      do
        cat >> docker/docker-compose.volumes.${stack}.yml<< EOF
  ${volume}:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=127.0.0.1,proto=tcp,port=12345,nosuid,noexec,nodev,rw
      device: ":/srv/swarm/docker/volumes/${volume}"
EOF
        all_volumes=${all_volumes}' '${volume}
      done
    done
  done
  #echo "[vols] "$all_volumes | tr ' ' $'\n'
  #echo "[vols] "${all_volumes}
  for volume in $(echo ${all_volumes} | tr ' ' $'\n' | sort | uniq);
  do
    echo "[vol] "${volume}
    cat >> ansible/vars/main.yml<< EOF
  - ${volume}
EOF
  done
}

# Update resources that refer to logs:
#  - acquis.yaml file for crowdsec
#  - mountpoints of crowdsec service in docker compose
function refresh_logs {
  # crowdsec
  crowdsec_mountlist=""
  rm ${CROWDSEC_ACQUIS_FILE}
  for entry in $(cat ${MAIN_JSON} | jq -c '.logs[]');
  do
    cat >> ${CROWDSEC_ACQUIS_FILE} << EOF
---
filenames:
EOF
  volume=$(echo ${entry} | jq -c '.volume' | cut -d'"' -f 2)
  crowdsec_mountlist=${crowdsec_mountlist}'"'${volume}':/'${volume}':ro",'
  filelist=""
  for filename in $(echo ${entry} | jq -c '.files[]' | cut -d'"' -f 2);
  do
    cat >> ${CROWDSEC_ACQUIS_FILE} << EOF
  - ${volume}/${filename}
EOF
  filelist=${filelist}'"${filename}:/${filename}:ro",'
  done
  cat >> ${CROWDSEC_ACQUIS_FILE} << EOF
labels:
  type: $(echo ${entry} | jq -c '.type' | cut -d'"' -f 2)
EOF
  done
  # add default database volume (soon this will disappear in favor of postgres)
  crowdsec_mountlist=${crowdsec_mountlist}'"crowdsec-database:/var/lib/crowdsec/data/",'
  #echo ${crowdsec_mountlist}
  echo "[crowdsec_mountlist] "${crowdsec_mountlist::-1}
  #for stack in $(yq '.volumes | keys' docker/nsm/docker-compose-ansible.yml | cut -d'-' -f 2- | xargs)
  #cp docker/purpleids/docker-compose-ansible-base.yml docker/purpleids/docker-compose-ansible.yml && \
  yq -i '.services.crowdsec.volumes = ['${crowdsec_mountlist::-1}']' docker/purpleids/docker-compose-ansible.yml
}

case $1 in
  volumes)
    nano ${MAIN_JSON}
    #volumes_helper "${@:2}"
    ;;
  push)
    #read -p "Enter environment (swarm or compose): " ENVIRONMENT
    COMPOSE_VERSION=3.3
    case $2 in
    swarm)
    STACK_NAME=swarm_stacks
    PLAYBOOK_NAME=push-stack
    ;;
    compose)
    STACK_NAME=manual_stacks
    PLAYBOOK_NAME=push-compose
    ;;
    ips)
    STACK_NAME=swarm_stacks
    PLAYBOOK_NAME=push-ips
    ;;
    *)
    echo "[!] Unsupported environment '"$2"'"
    exit 1
    ;;
    esac

    setup_helper && \
    refresh_volumes && \
    #refresh_logs && \
    #echo "[*] Clearing stale ssh pubkeys" && \
    #rm -rf ansible/.ssh/*.pub && \
    ansible-playbook -vv -i ansible/.inventory -b ansible/${PLAYBOOK_NAME}.yml -e@ansible/.vault --ask-vault-pass
    #ansible-playbook -vv -i ansible/.inventory -b ansible/push-compose.yml -e@ansible/.vault --ask-vault-pass
    ;;
  ips)
    nano docker/docker-bundles/services/crowdsec-swarm.yml;
    EDITOR=nano ./purplesec vault edit
    ;;
  stats)
    echo "[!] Not implemented yet"
    ;;
  inventory)
    if ! file -E ansible/.inventory 2>&1; then
      cp templates/inventory.template ansible/.inventory
    fi && nano ansible/.inventory
    ;;
  vault)
    ansible-vault ${2} ansible/.vault
    ;;
  vars)
    nano templates/vars.yml.template
    ;;
  logs)
    nano ${MAIN_JSON}
    #logs_helper "${@:2}"
    # .logs is a JSON that contains volume_name/logfile.log and log types in those volumes
    # auto add volume to acquis.yml
    # auto add volume to crowdsec service in compose
    ;;
  *)
    echo "[*] Falling back to playbook name as input"
    cp templates/vars.yml.template ansible/vars/main.yml && \
    ansible-playbook -v -i ansible/.inventory -b ansible/${1}.yml -e@ansible/.vault --ask-vault-pass
    exit 1
    ;;
esac
